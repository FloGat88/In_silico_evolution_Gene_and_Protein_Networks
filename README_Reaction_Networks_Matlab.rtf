{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww14960\viewh10260\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \
Reaction_Network_Evolution has been created by Florian Gartner in 2019 and provides Matlab code to simulate the evolution of chemical or biological reaction-diffusion networks with one spatial dimension. A reaction network is organized as a collection of 'Elements', which represent chemicals or proteins (in different biochemical configurations, which can be either solved in the cytosol or bound to the membrane) as well as complexes of two or several proteins, and so-called reaction 'Arrows' which describe possible reactions between these Elements. This representation allows for a high degree of versatility for the code to be adapted to specific biochemical problems, which basically only requires to define the appropriate Arrows and corresponding Mutations. For example, one could easily extend the repertoire of possible reactions by effective reactions, like effective few-particle reactions or catalytic interactions of Michaelis-Menten type just by defining the classes of the corresponding Reaction Arrows and specifying how the Networks mutate (in Network.m) with respect to these reaction types. This might provides a possibility to speed up the evolution as it allows to find sophisticated solutions more easily than with only elementary reactions between the Elements. Furthermore, thanks to the organization of the Network in Subnetworks representing all different biochemical conformations of a protein species, it is possible to define special types of mutations in which large parts of the network are duplicated, which occurs, for example, as a result of gene duplication, recombination of chromosomes or horizontal gene transfer. This folder contains the basic version of the algorithm representing only elementary reactions (conformational switches, 2-particle reactions and the reverse decay reactions) and elementary mutations. \
\
The spatio-temporal reaction dynamics can be integrated either with Matlab's ode15s or Matlab's pdepe. For both cases we provide mex-functions (functions written in C++ and compiled for use in Matlab) for the time criticial function evaluations (reaction_diffusion_dynamics.mexmaci64 (source code: reaction_diffusion_dynamics.cpp)) and reaction_diffusion_dynamics_pdepe.mexmaci64 (source code: reaction_diffusion_dynamics_pdepe.cpp)). The fitness function provided in this example selects for networks that are capable of organizing themselves into and maintaining a left-right polarized state (i.e. a state in which certain species are more abundant on one side or the other) starting from an initial homogeneous distribution with some spatial noise. Polarization is an important feature in several bacteria and eukaryotic cells, which precedes cell division, cell motion or development. In order to select networks for other features just modify the Fitness function in 'Network.m' accordingly. \
\
To start the execution of the algorithm run 'Evolution.m'. Make sure that 'Utility' and 'Pdepe' with all subfolders are added to the Matlab path. The code is automatically executed in parallel if Matlab's parallelization toolbox (containing 'parfor') is available.\
\
The population size N (default: N=20) and maximum number of simulated generations (default: 1000) can be changed in 'Evolution.m'. In its current implementation, 50% of the individuals with the highest fitness values are duplicated (reproduced) and mutated in each generation. The probabilities for the various mutations (change of rate constants, addition of elements or reactions or deletion of elements or reactions) can be modified in the function 'Mutate' and related functions in 'Network.m'.\
\
'Element.m' defines the properties and methods of a single element (protein or chemical species). 'Subnetwork.m' defines the properties and methods of a subnetwork of elements, which consists of a 'basis element' (either a protein or protein complex) and a number of 'derived elements' representing different biochemical configurations of the basis element. The struct 'transitions' handles the reactions between the elements of the subnetwork. Finally, a 'Network' is essentially a collection of subnetworks as well as two structs 'reactions' and 'decays' that specify reactions between elements of different subnetworks, specifically dimerization reactions, which create a new basis element in a new subnetwork and decay reactions as the respective reverse reactions. Furthermore, 'Network.m' contains all the methods used to mutate the networks and evaluate a network's fitness (with respect to how well it can generate and maintain a polarized state in this example; the method 'FitnessPolarisation' is based on ode15s while 'FitnessPolarisation_pdepe' is based on pdepe whereby apart from the solver type both functions evaluate fitness in the same way). Moreover, it contains data types and methods that enable the interface to the differential equations solvers.\
Finally, 'Evolution.m' executes the evolutionary process. All the mex functions and remaining Matlab functions (like 'Jacobian') are required for the differential equations solvers.\
 \
The current implementation and default settings simulate the evolution of basic reaction schemes that are selected for their ability to form and maintain polarized states in a one-dimensional spatial geometry. Thereby we assume that proteins ('Elements') can be either solved in the cytosol or bound to the membrane, which distinguishes their diffusion constants by two orders of magnitude (see parameter settings in 'FitnessPolarisation' and 'FitnessPolarisation_pdepe'). Mutation schemes and fitness functions can be modified accordingly to select for any other desired features or functions of the reaction networks.\
\
}